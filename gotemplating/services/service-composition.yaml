apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xecsservice.microservices.dmaganto.infra
spec:
  compositeTypeRef:
    apiVersion: microservices.dmaganto.infra/v1alpha1
    kind: XECSService
  mode: Pipeline
  pipeline:
  - step: environment-config
    functionRef:
      name: function-environment-configs
    input:
      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
      kind: Input
      spec:
        environmentConfigs:
          - type: Reference
            ref:
              name: tenant1-config
  - step: go-templating-resources
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{- $xr := getCompositeResource . }}
          {{- $tenant := (get $xr.spec.resourceConfig "tenant") }}
          {{- $region := (get $xr.spec.resourceConfig "region") }}
          {{- $family := (get $xr.spec.parameters "family") }}
          {{- $clusterName := (get $xr.spec.parameters "clusterName") }}
          {{- $taskDef := printf "%s-%s" $family $clusterName }}
          {{- $subnets := (get $xr.spec.parameters "subnets") }}
          {{- $securityGroups := (get $xr.spec.parameters "securityGroups") }}
          {{- $desiredCount := (get $xr.spec.parameters "desiredCount") }}
          {{- $memory := (get $xr.spec.parameters "memory") }}
          {{- $cpu := (get $xr.spec.parameters "cpu") }}
          {{- $containerDefinitions := (get $xr.spec.parameters "containerDefinitions") }}
          {{- $taskHash := trunc 10 (sha256sum (toJson $containerDefinitions)) }}
          {{- $TaskDefRes := getComposedResource . $taskDef }}
          {{- $TaskDefRev := printf "%v" (get $TaskDefRes.status.atProvider "revision") }}
          {{- $TaskDefArn := get $TaskDefRes.status.atProvider "arn" }}

          ---
          apiVersion: microservices.dmaganto.infra/v1alpha1
          kind: XECSService
          metadata:
            name: {{ $xr.metadata.name }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: "XECSService"
          status:
            metadata:
              managedResources:
                service: {{ $xr.metadata.name }}
                taskDefinition: {{ printf "%s-%s" $family $taskHash }}
          ---
          apiVersion: ecs.aws.upbound.io/v1beta1
          kind: Service
          metadata:
            name: {{ $family }}
            annotations:
              {{ setResourceNameAnnotation $family }}
          spec:
            forProvider:
              cluster: {{ printf "%s-%s" $tenant $clusterName }}
              desiredCount: {{ $desiredCount }}
              launchType: FARGATE
              networkConfiguration:
              - assignPublicIp: false
                securityGroups:
                  {{- range $sg := $securityGroups }}
                  - {{ $sg }}
                  {{- end }}
                subnets:
                  {{- range $subnet := $subnets }}
                  - {{ $subnet }}
                  {{- end }}
              propagateTags: TASK_DEFINITION
              region: {{ $region }}
              taskDefinition: {{ $TaskDefArn }}
          ---
          apiVersion: ecs.aws.upbound.io/v1beta1
          kind: TaskDefinition
          metadata:
            labels:
              taskDefId: {{ printf "%s-%s" $family $taskHash }}
            name: {{ printf "%s-%s" $family $taskHash }}
            annotations:
              {{ setResourceNameAnnotation (printf "%s-%s" $family $taskHash) }}
              taskDefId: {{ printf "%s-%s" $family $taskHash }}k
          spec:
            forProvider:
              containerDefinitions: {{ $containerDefinitions | quote}}
              networkMode: awsvpc
              family: {{ $family }}
              region: {{ $region}}
              requiresCompatibilities:
              - FARGATE
              memory: {{ $memory | quote }}
              cpu: {{ $cpu | quote }}
            managementPolicies: ["Create", "Delete", "LateInitialize", "Observe"]
  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: function-auto-ready